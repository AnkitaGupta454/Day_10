#include <iostream>
using namespace std;
struct node { 
    int data; 
    struct node *left, *right; 
}; 

void printLeaves(node* root)
{
    if(!root)
    return;
    printLeaves(root->left);
    if((!root->left)&&(!root->right))
    cout<<root->data<<" ";
    printLeaves(root->right);
}

void Boundaryleft(node* root)
{
    if(!root)
    return;
    
    if(root->left)
    {
        cout<<root->data<<" ";
        Boundaryleft(root->left);
    }
    else if(root->right)
    {
         cout<<root->data<<" ";
         Boundaryleft(root->right);
    }
}

void Boundaryright(node* root)
{
  if(!root)
    return;
    
    if(root->right)
    {
       Boundaryright(root->right);
        cout<<root->data<<" ";
    }
    else if(root->left)
    {
        Boundaryright(root->left);
         cout<<root->data<<" ";
    }  
}

void printBoundary(node* root)
{
    if(!root)
    return;
    cout<<root->data<<" ";
    Boundaryleft(root->left);
    printLeaves(root->left);
    printLeaves(root->right);
    Boundaryright(root->right);
}
struct node* newNode(int data) 
{ 
    struct node* temp = (struct node*)malloc(sizeof(struct node)); 
  
    temp->data = data; 
    temp->left = temp->right = NULL; 
  
    return temp; 
} 
  
int main() 
{ 
    struct node* root = newNode(20); 
    root->left = newNode(8); 
    root->left->left = newNode(4); 
    root->left->right = newNode(12); 
    root->left->right->left = newNode(10); 
    root->left->right->right = newNode(14); 
    root->right = newNode(22); 
    root->right->right = newNode(25); 
  
    printBoundary(root); 
  
    return 0; 
}
